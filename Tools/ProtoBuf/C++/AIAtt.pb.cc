// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: AIAtt.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "AIAtt.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
class AIAttDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<AIAtt>
     _instance;
} _AIAtt_default_instance_;

namespace protobuf_AIAtt_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[1];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AIAtt, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AIAtt, moveinterval_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AIAtt, moveradius_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AIAtt, attackinterval_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AIAtt, thinkinterval_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AIAtt, searchinterval_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AIAtt, searchradius_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AIAtt, scriptname_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AIAtt, rotateangle_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(AIAtt)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_AIAtt_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "AIAtt.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 1);
}

}  // namespace
void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  _AIAtt_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_AIAtt_default_instance_);}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
namespace {
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\013AIAtt.proto\"\267\001\n\005AIAtt\022\024\n\014moveInterval\030"
      "\001 \001(\005\022\022\n\nmoveRadius\030\002 \001(\002\022\026\n\016attackInter"
      "val\030\003 \001(\005\022\025\n\rthinkInterval\030\004 \001(\005\022\026\n\016sear"
      "chInterval\030\005 \001(\005\022\024\n\014searchRadius\030\006 \001(\002\022\022"
      "\n\nscriptName\030\007 \001(\t\022\023\n\013rotateAngle\030\010 \001(\002b"
      "\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 207);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "AIAtt.proto", &protobuf_RegisterTypes);
}
} // anonymous namespace

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_AIAtt_2eproto


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AIAtt::kMoveIntervalFieldNumber;
const int AIAtt::kMoveRadiusFieldNumber;
const int AIAtt::kAttackIntervalFieldNumber;
const int AIAtt::kThinkIntervalFieldNumber;
const int AIAtt::kSearchIntervalFieldNumber;
const int AIAtt::kSearchRadiusFieldNumber;
const int AIAtt::kScriptNameFieldNumber;
const int AIAtt::kRotateAngleFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AIAtt::AIAtt()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_AIAtt_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:AIAtt)
}
AIAtt::AIAtt(const AIAtt& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  scriptname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.scriptname().size() > 0) {
    scriptname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.scriptname_);
  }
  ::memcpy(&moveinterval_, &from.moveinterval_,
    static_cast<size_t>(reinterpret_cast<char*>(&rotateangle_) -
    reinterpret_cast<char*>(&moveinterval_)) + sizeof(rotateangle_));
  // @@protoc_insertion_point(copy_constructor:AIAtt)
}

void AIAtt::SharedCtor() {
  scriptname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&moveinterval_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&rotateangle_) -
      reinterpret_cast<char*>(&moveinterval_)) + sizeof(rotateangle_));
  _cached_size_ = 0;
}

AIAtt::~AIAtt() {
  // @@protoc_insertion_point(destructor:AIAtt)
  SharedDtor();
}

void AIAtt::SharedDtor() {
  scriptname_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void AIAtt::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AIAtt::descriptor() {
  protobuf_AIAtt_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_AIAtt_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const AIAtt& AIAtt::default_instance() {
  protobuf_AIAtt_2eproto::InitDefaults();
  return *internal_default_instance();
}

AIAtt* AIAtt::New(::google::protobuf::Arena* arena) const {
  AIAtt* n = new AIAtt;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void AIAtt::Clear() {
// @@protoc_insertion_point(message_clear_start:AIAtt)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  scriptname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&moveinterval_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&rotateangle_) -
      reinterpret_cast<char*>(&moveinterval_)) + sizeof(rotateangle_));
  _internal_metadata_.Clear();
}

bool AIAtt::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:AIAtt)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 moveInterval = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &moveinterval_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float moveRadius = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u /* 21 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &moveradius_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 attackInterval = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &attackinterval_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 thinkInterval = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &thinkinterval_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 searchInterval = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &searchinterval_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float searchRadius = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(53u /* 53 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &searchradius_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string scriptName = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_scriptname()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->scriptname().data(), static_cast<int>(this->scriptname().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "AIAtt.scriptName"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float rotateAngle = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(69u /* 69 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &rotateangle_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:AIAtt)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:AIAtt)
  return false;
#undef DO_
}

void AIAtt::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:AIAtt)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 moveInterval = 1;
  if (this->moveinterval() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->moveinterval(), output);
  }

  // float moveRadius = 2;
  if (this->moveradius() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->moveradius(), output);
  }

  // int32 attackInterval = 3;
  if (this->attackinterval() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->attackinterval(), output);
  }

  // int32 thinkInterval = 4;
  if (this->thinkinterval() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->thinkinterval(), output);
  }

  // int32 searchInterval = 5;
  if (this->searchinterval() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->searchinterval(), output);
  }

  // float searchRadius = 6;
  if (this->searchradius() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->searchradius(), output);
  }

  // string scriptName = 7;
  if (this->scriptname().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->scriptname().data(), static_cast<int>(this->scriptname().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "AIAtt.scriptName");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->scriptname(), output);
  }

  // float rotateAngle = 8;
  if (this->rotateangle() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(8, this->rotateangle(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:AIAtt)
}

::google::protobuf::uint8* AIAtt::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:AIAtt)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 moveInterval = 1;
  if (this->moveinterval() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->moveinterval(), target);
  }

  // float moveRadius = 2;
  if (this->moveradius() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->moveradius(), target);
  }

  // int32 attackInterval = 3;
  if (this->attackinterval() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->attackinterval(), target);
  }

  // int32 thinkInterval = 4;
  if (this->thinkinterval() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->thinkinterval(), target);
  }

  // int32 searchInterval = 5;
  if (this->searchinterval() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->searchinterval(), target);
  }

  // float searchRadius = 6;
  if (this->searchradius() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->searchradius(), target);
  }

  // string scriptName = 7;
  if (this->scriptname().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->scriptname().data(), static_cast<int>(this->scriptname().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "AIAtt.scriptName");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->scriptname(), target);
  }

  // float rotateAngle = 8;
  if (this->rotateangle() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(8, this->rotateangle(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AIAtt)
  return target;
}

size_t AIAtt::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:AIAtt)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string scriptName = 7;
  if (this->scriptname().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->scriptname());
  }

  // int32 moveInterval = 1;
  if (this->moveinterval() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->moveinterval());
  }

  // float moveRadius = 2;
  if (this->moveradius() != 0) {
    total_size += 1 + 4;
  }

  // int32 attackInterval = 3;
  if (this->attackinterval() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->attackinterval());
  }

  // int32 thinkInterval = 4;
  if (this->thinkinterval() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->thinkinterval());
  }

  // int32 searchInterval = 5;
  if (this->searchinterval() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->searchinterval());
  }

  // float searchRadius = 6;
  if (this->searchradius() != 0) {
    total_size += 1 + 4;
  }

  // float rotateAngle = 8;
  if (this->rotateangle() != 0) {
    total_size += 1 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AIAtt::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:AIAtt)
  GOOGLE_DCHECK_NE(&from, this);
  const AIAtt* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const AIAtt>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:AIAtt)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:AIAtt)
    MergeFrom(*source);
  }
}

void AIAtt::MergeFrom(const AIAtt& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:AIAtt)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.scriptname().size() > 0) {

    scriptname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.scriptname_);
  }
  if (from.moveinterval() != 0) {
    set_moveinterval(from.moveinterval());
  }
  if (from.moveradius() != 0) {
    set_moveradius(from.moveradius());
  }
  if (from.attackinterval() != 0) {
    set_attackinterval(from.attackinterval());
  }
  if (from.thinkinterval() != 0) {
    set_thinkinterval(from.thinkinterval());
  }
  if (from.searchinterval() != 0) {
    set_searchinterval(from.searchinterval());
  }
  if (from.searchradius() != 0) {
    set_searchradius(from.searchradius());
  }
  if (from.rotateangle() != 0) {
    set_rotateangle(from.rotateangle());
  }
}

void AIAtt::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:AIAtt)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AIAtt::CopyFrom(const AIAtt& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:AIAtt)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AIAtt::IsInitialized() const {
  return true;
}

void AIAtt::Swap(AIAtt* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AIAtt::InternalSwap(AIAtt* other) {
  using std::swap;
  scriptname_.Swap(&other->scriptname_);
  swap(moveinterval_, other->moveinterval_);
  swap(moveradius_, other->moveradius_);
  swap(attackinterval_, other->attackinterval_);
  swap(thinkinterval_, other->thinkinterval_);
  swap(searchinterval_, other->searchinterval_);
  swap(searchradius_, other->searchradius_);
  swap(rotateangle_, other->rotateangle_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata AIAtt::GetMetadata() const {
  protobuf_AIAtt_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_AIAtt_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// AIAtt

// int32 moveInterval = 1;
void AIAtt::clear_moveinterval() {
  moveinterval_ = 0;
}
::google::protobuf::int32 AIAtt::moveinterval() const {
  // @@protoc_insertion_point(field_get:AIAtt.moveInterval)
  return moveinterval_;
}
void AIAtt::set_moveinterval(::google::protobuf::int32 value) {
  
  moveinterval_ = value;
  // @@protoc_insertion_point(field_set:AIAtt.moveInterval)
}

// float moveRadius = 2;
void AIAtt::clear_moveradius() {
  moveradius_ = 0;
}
float AIAtt::moveradius() const {
  // @@protoc_insertion_point(field_get:AIAtt.moveRadius)
  return moveradius_;
}
void AIAtt::set_moveradius(float value) {
  
  moveradius_ = value;
  // @@protoc_insertion_point(field_set:AIAtt.moveRadius)
}

// int32 attackInterval = 3;
void AIAtt::clear_attackinterval() {
  attackinterval_ = 0;
}
::google::protobuf::int32 AIAtt::attackinterval() const {
  // @@protoc_insertion_point(field_get:AIAtt.attackInterval)
  return attackinterval_;
}
void AIAtt::set_attackinterval(::google::protobuf::int32 value) {
  
  attackinterval_ = value;
  // @@protoc_insertion_point(field_set:AIAtt.attackInterval)
}

// int32 thinkInterval = 4;
void AIAtt::clear_thinkinterval() {
  thinkinterval_ = 0;
}
::google::protobuf::int32 AIAtt::thinkinterval() const {
  // @@protoc_insertion_point(field_get:AIAtt.thinkInterval)
  return thinkinterval_;
}
void AIAtt::set_thinkinterval(::google::protobuf::int32 value) {
  
  thinkinterval_ = value;
  // @@protoc_insertion_point(field_set:AIAtt.thinkInterval)
}

// int32 searchInterval = 5;
void AIAtt::clear_searchinterval() {
  searchinterval_ = 0;
}
::google::protobuf::int32 AIAtt::searchinterval() const {
  // @@protoc_insertion_point(field_get:AIAtt.searchInterval)
  return searchinterval_;
}
void AIAtt::set_searchinterval(::google::protobuf::int32 value) {
  
  searchinterval_ = value;
  // @@protoc_insertion_point(field_set:AIAtt.searchInterval)
}

// float searchRadius = 6;
void AIAtt::clear_searchradius() {
  searchradius_ = 0;
}
float AIAtt::searchradius() const {
  // @@protoc_insertion_point(field_get:AIAtt.searchRadius)
  return searchradius_;
}
void AIAtt::set_searchradius(float value) {
  
  searchradius_ = value;
  // @@protoc_insertion_point(field_set:AIAtt.searchRadius)
}

// string scriptName = 7;
void AIAtt::clear_scriptname() {
  scriptname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& AIAtt::scriptname() const {
  // @@protoc_insertion_point(field_get:AIAtt.scriptName)
  return scriptname_.GetNoArena();
}
void AIAtt::set_scriptname(const ::std::string& value) {
  
  scriptname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:AIAtt.scriptName)
}
#if LANG_CXX11
void AIAtt::set_scriptname(::std::string&& value) {
  
  scriptname_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:AIAtt.scriptName)
}
#endif
void AIAtt::set_scriptname(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  scriptname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:AIAtt.scriptName)
}
void AIAtt::set_scriptname(const char* value, size_t size) {
  
  scriptname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:AIAtt.scriptName)
}
::std::string* AIAtt::mutable_scriptname() {
  
  // @@protoc_insertion_point(field_mutable:AIAtt.scriptName)
  return scriptname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* AIAtt::release_scriptname() {
  // @@protoc_insertion_point(field_release:AIAtt.scriptName)
  
  return scriptname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void AIAtt::set_allocated_scriptname(::std::string* scriptname) {
  if (scriptname != NULL) {
    
  } else {
    
  }
  scriptname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), scriptname);
  // @@protoc_insertion_point(field_set_allocated:AIAtt.scriptName)
}

// float rotateAngle = 8;
void AIAtt::clear_rotateangle() {
  rotateangle_ = 0;
}
float AIAtt::rotateangle() const {
  // @@protoc_insertion_point(field_get:AIAtt.rotateAngle)
  return rotateangle_;
}
void AIAtt::set_rotateangle(float value) {
  
  rotateangle_ = value;
  // @@protoc_insertion_point(field_set:AIAtt.rotateAngle)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
